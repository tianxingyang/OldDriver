#pragma once
#include <iostream>

class foo
{
public:
    foo();
    ~foo();

private:
    const static double m1;
    const static int m2 = 3;//按照c++要求，任何类型的静态成员变量都要在类外赋值，但vs有毒啊！int型的在类内赋值不会报错
};

foo::foo()
{
}

foo::~foo()
{
}

const double foo::m1 = 1.1;//给静态成员变量赋值的时候，不需要加static但是需要const

/*基类中，通常会定义两种函数，一种是希望派生类直接继承而不修改的函数，一种是希望派生类覆盖的函数
后者在基类中定义时一般定义为虚函数
*/
class BaseClass
{
public:
    BaseClass();
    virtual ~BaseClass();//基类通常需要有一个虚的析构函数
    void printme() { std::cout << "public: BaseClass.printme()" << std::endl; }
    int memA;
private:
    void printme(bool bSwitch) {}
};

BaseClass::BaseClass()
{
    std::cout << "BaseClass::BaseClass()" << std::endl;
}

BaseClass::~BaseClass()
{
    std::cout << "BaseClass::~BaseClass()" << std::endl;
}
class DerivedClass : public BaseClass
{
public:
    DerivedClass();
    ~DerivedClass();

private:
};

DerivedClass::DerivedClass()
{
}

DerivedClass::~DerivedClass()
{
    std::cout << "DerivedClass::~DerivedClass()" << std::endl;
}